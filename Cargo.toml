[package]
name = "pi_ui_render"
version = "0.1.46"
authors = ["suncy <suncy@gmail.com>"]
edition = "2021"
description = "Renderer 2D UI with Bevy Ecs"
repository = "https://github.com/GaiaWorld/pi_bevy"
license = "MIT OR Apache-2.0"
keywords = ["pi", "bevy", "ecs", "ui"]

[lib]
crate-type = ["lib"]

[features]
# "glow/debug_trace_calls"
# default = ["single_thread", "trace"]
wasm_bindgen = []
debug = []
trace = []
tracing-chrome = [
	"trace",
	"pi_bevy_render_plugin/trace", 
	"pi_bevy_log/tracing-chrome", 
	"pi_world/trace",
	# "bevy_app/trace", 
	# "bevy_ecs/trace",
]

tracing-tracy = [
	"trace",
	"pi_bevy_render_plugin/trace", 
	"pi_bevy_log/tracing-tracy", 
	"pi_world/trace",
	# "bevy_app/trace", 
	# "bevy_ecs/trace",
]

single_thread = [
	"pi_bevy_render_plugin/single_thread",
	"pi_hal/single_thread",
	"wgpu/single_thread",
	"pi_world/single_thread"
] # 本地平台，设置该feature有效，运行时为单线程运行时

[dependencies]
# glow = "0.13"
bitflags = "1.2"
serde_json = "1.0"
pi_print_any = "0.1"
pi_slotmap = "0.1"
num-traits = "0.2.6"
fnv = "1.0.6"
lazy_static = "1.4"
paste = "1.0"
serde = { version = "1.0", features = ["derive"] }
ordered-float = { version = "3.0", default-features = false, features = [
	"serde",
] }
fxhash = "0.2.1"
nalgebra = { version = "0.32", features = ["serde", "serde-serialize"] }
parry2d = "0.13"
# ncollide2d = {version = "0.33", features = ["serde"]}
log = { version = "0.4", features = ["kv_unstable"] }
# tracing = {version = "0.1", optional }
smallvec = { version = "1.8", features = ["serde"] }
bitvec = { version = "1.0", features = ["serde"] }
cssparser = "0.29"
pi_hash = "0.1"
pi_atom = { version = "0.5", features = ["serde", "pointer_width_32", "lookup_by_hash"] }
pi_enum_default_macro = "0.1"
pi_map = "0.2"
pi_null = "0.1"
pi_ucd = "0.1"
pi_data_view = "0.1"
futures = "0.3"
pi_polygon = "0.1"
geo = "0.26"
pi_cg2d = "0.3"
crossbeam = "0.8"
fixedbitset = { version = "0.4", features = ["serde"] }
bytemuck = { version = "1.4", features = ["derive"] }
naga = { version = "0.19" }
pi_assets = "0.14"
image = "0.24"
polygon2 = "0.3"
pi_slotmap_tree = "0.3"
pi_dirty = "0.1"

pi_flex_layout = "0.2"
pi_spatial = "0.5"
pi_hal = { version = "0.1", registry = "yn" }
pi_postprocess = { version = "0.1", registry = "yn" }
pi_curves = { version = "0.1", registry = "yn" }
pi_animation = { version = "0.1", registry = "yn" }
render_derive = { version = "0.1", registry = "yn" }
pi_style = { version = "0.1", registry = "yn" }
pi_densevec = "0.1"
pi_futures = "0.1"
pi_time = "0.3"
# siphasher = {version="0.3", features=["serde_no_std"]}
# wasm-bindgen = { version = "0.2", features = ["serde-serialize"] }

pi_bevy_post_process = { version = "0.1", registry = "yn" }
pi_bevy_ecs_extend = { version = "0.1", registry = "yn" }
pi_bevy_render_plugin = { version = "0.1", registry = "yn" }
pi_bevy_asset = { version = "0.1", registry = "yn" }
pi_world = "0.1.20"
# bevy_utils = "0.11"
# bevy_app = { version = "0.11", default_features = false }
bevy_window = { version = "0.1", registry = "yn", package = "pi_bevy_window" }
# bevy_window = "0.11"
# zerovec = "0.9"
guillotiere = { version = "0.6" }
derive-deref-rs = "0.1"
thiserror = "1.0"

# wgpu = { version = "0.1", registry = "yn", package = "pi_wgpu" }
wgpu = { version = "0.1", registry = "yn", package = "pi_wgpu"}

pi-async-rt = "0.1"
pi_share = { version = "0.4" }
pi_render = { version = "0.1", registry = "yn" }
# derive_deref = "1.1"
tracing-subscriber = "0.3"
ahash = "0.8"
pi_key_alloter = {version = "0.5", features = ["serde"]}

pi_ui_render_macros = {version="0.1.1", path = "./macros", registry = "yn"}
tracing = { version = "0.1", default-features = false, features = ["std"] }

# flume = "0.10"

[dev-dependencies]
pi_async_httpc = "0.5"
# tracy-client-sys = "=0.22.0"
# tracy-client = "=0.16.4"
tracing-tracy = {version = "0.11", features = ["flush-on-exit"]}


log = { version = "0.4", features = ["kv_unstable", "release_max_level_info"] }
# log = { version = "0.4", features = ["kv_unstable", "max_level_off"] }
float-ord = "0.3"
async-trait = "0.1"
spin_sleep = "1.1"
num_cpus = "1.13"
# bevy_log = { version = "0.11", default-features = false }
# bevy_a11y = "0.11"
pi_bevy_log = { version = "0.1", registry = "yn" }
criterion = { version = "0.3", features = ["html_reports"] }
pi_winit = { version = "0.27", registry = "yn", package = "winit" }
tracing = "0.1"
postcard = { version = "1.0", features = ["use-std"] }

# wgpu = { version = "0.1", registry = "yn", package = "pi_wgpu" }
wgpu = { version = "0.1", registry = "yn", package = "pi_wgpu", features=["use_wgpu"]}#
# pi_ui_render = { path = "./", features = ["trace", "single_thread"] }
# pi_ui_render = { path = "./", features = ["trace"] }
pi_ui_render = { path = "./", features = ["debug", "single_thread"] }
# bevy_ecs = {version = "0.11",  features = ["multi-threaded"]}

pi_bevy_winit_window = { version = "0.1", registry = "yn" }
wasm-bindgen-test = "0.3"

pi_sdf = {version = "=0.1.19", registry="yn"}
pi_hal = {version = "=0.1.38", registry="yn"}

# "debug", "trace"
# pi_export_gui = {path="../pi_export/crates/gui"}
# bevy_mod_debugdump = "0.6"
# bevy-inspector-egui="0.14"
# bevy_internal={version="0.9", features=["bevy_winit"]}
# bevy_internal={path="../bevy/crates/bevy_internal", features=["bevy_winit"]}


# tree = { path = "../pi_lib/tree"}
# slotmap = { path = "../pi_lib/slotmap"}
# slab = {path="../pi_lib/slab"}
# atom = {path="../pi_lib/atom"}
# map = {path="../pi_lib/map"}
# any = {path="../pi_lib/any"}
# listener = {path="../pi_lib/listener"}
# hash = {path="../pi_lib/hash"}
# time = {path="../pi_lib/time"}
# share = {path="../pi_lib/share"}
# wy_rng = {path="../pi_lib/wy_rng"}
# debug_info = {path="../pi_lib/debug_info"}
# graph = {path="../pi_lib/graph"}
# async_graph = {path="../pi_lib/async_graph"}
# async = {path="../pi_lib/async"}
# dirty = { path= "../pi_lib/dirty"}
# pi_ecs_macros = { path = "macros"}
# paste = "0.1"
# lazy_static = "*"
# log = "*"
# rand = "*"
# futures = "0.3"
# fixedbitset = "0.4"
[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
font_kit = { registry = "yn", version = "0.1" }
timer = "0.2.0"
env_logger = "0.9"

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
uuid = { version = "1", features = ["js"] }
pi-async-rt = { version = "0.1", features = ["serial"] }
pi_render = { version = "0.1", registry = "yn", features = ["webgl"] }
web-sys = { version = "0.3", features = ["HtmlCanvasElement"] }
wasm-bindgen = "0.2"
pi_hal = { version = "0.1", registry = "yn", features = ["web_local_load"] }
getrandom = { version = "0.2.7", features = ["js"] }

[build-dependencies]
render_compile = { version = "0.1", registry = "yn" }


[profile.release]
# lto = true
opt-level = 's'
codegen-units = 1
# debug = false

# im = "*"

# [dependencies.web-sys]
# version = "*"
# features = [
# 	"console",
# ]
[net]
# git-fetch-with-cli = true
# offline = true

[[example]]
name = "quad"
test = true

[[example]]
name = "background_image"
test = true

[[example]]
name = "blend_mode"
test = true

[[example]]
name = "background_compress_texture"
test = true



[patch.crates-io]
# pi_append_vec = {path = "../pi_append_vec"}
# probabilistic-collections = { git = "https://github.com/GaiaWorld/pi_probabilistic_collections.git" }
# pi_graph = { path = "../pi_graph" }
# pi_async_graph = { path = "../pi_async_graph" }
# geo = { path = "../geo/geo" }
# pi_assets = { path = "../pi_assets" }
# pi_share = { path = "../pi_share" }
# wgpu= {path = "../wgpu/wgpu"}
pi_world = { path = "../pi_world" }
pi_world_macros = { path = "../pi_world/macros" }

# bevy_app = { path = "../bevy/crates/bevy_app" }
# bevy_ecs = { path = "../bevy/crates/bevy_ecs" }
# bevy_tasks = { path = "../bevy/crates/bevy_tasks" }
# bevy_window = { path = "../bevy/crates/bevy_window" }
# bevy_utils = { path = "../bevy/crates/bevy_utils" }
# bevy_a11y = { path = "../bevy/crates/bevy_a11y" }
# bevy_input = { path = "../bevy/crates/bevy_input" }
# bevy_reflect = { path = "../bevy/crates/bevy_reflect" }
# bevy_math = { path = "../bevy/crates/bevy_math" }

# pi_key_alloter = {path = "../pi_key_alloter"}

# pi_slotmap_tree = { path = "../pi_slotmap_tree" }
# pi_map = { path = "../pi_map" }
# pi_flex_layout = { path = "../pi_flex_layout" }
# pi_dirty={path = "../pi_dirty" }
# pi_spatial = { path="../pi_spatial" }

# pi_spatial = {path = "../pi_spatial"}
# glow = {path = "../glow"}

[patch.yn]
# pi_curves  = {path="../pi_curves"}
# pi_animation = { path="../pi_animation"}
pi_style = {path = "../pi_style"}
# pi_wgpu = {path = "../pi_wgpu"}
# pi_egl = {path = "../pi_egl"}
# winit = {path = "../winit"}
# font_kit = { path = "../font_kit" }
pi_hal = { path = "../pi_hal" }
# pi_sdf = { path = "../pi_sdf" }
pi_postprocess = { path = "../pi_postprocess" }

# bevy
# pi_bevy_ecs_extend = { path = "../pi_bevy_new_graphic/crates/ecs_extend" }
# pi_bevy_render_plugin = { path = "../pi_bevy_new_graphic/crates/render" }
# pi_bevy_asset = { path = "../pi_bevy_new_graphic/crates/asset" }
# pi_bevy_winit_window = { path = "../pi_bevy_new_graphic/crates/winit_window" }
# pi_bevy_log = { path = "../pi_bevy_new_graphic/crates/log" }
# pi_bevy_ecs_macro = { path = "../pi_bevy_new_graphic/crates/ecs_extend/macro" }
# pi_bevy_post_process = { path = "../pi_bevy_new_graphic/crates/post_process" }
# pi_bevy_window = { path = "../pi_bevy_new_graphic/crates/window" }

pi_bevy_ecs_extend = { path = "../pi_bevy/crates/ecs_extend" }
pi_bevy_render_plugin = { path = "../pi_bevy/crates/render" }
pi_bevy_asset = { path = "../pi_bevy/crates/asset" }
pi_bevy_winit_window = { path = "../pi_bevy/crates/winit_window" }
pi_bevy_log = { path = "../pi_bevy/crates/log" }
pi_bevy_ecs_macro = { path = "../pi_bevy/crates/ecs_extend/macro" }
pi_bevy_post_process = { path = "../pi_bevy/crates/post_process" }
pi_bevy_window = { path = "../pi_bevy/crates/window" }

# pi_render
pi_render = { path = "../pi_render" }
render_core = {path = "../pi_render/crates/render_core"}
render_derive = {path = "../pi_render/crates/render_derive"}
render_compile = {path = "../pi_render/crates/render_compile"}

# pi_postprocess = { path = "../pi_post_process"}

# pi_graph = {path = "../pi_graph"}

# pi_slotmap = { path = "../pi_slotmap" }

# pi_dirty = { path = "../pi_dirty" }
